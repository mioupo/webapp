<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xmlns:mvc="http://www.springframework.org/schema/mvc"
             xsi:schemaLocation="http://www.springframework.org/schema/beans 
             			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-3.2.xsd 
                        http://www.springframework.org/schema/security/oauth2 
                        http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd 
                        http://www.springframework.org/schema/mvc 
                        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

    <!--
    Oauth server start.............
    -->
	<!-- 数据源配置, 使用DBCP数据库连接池 -->
	<beans:bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<beans:property name="driverClassName" value="${jdbc.driver}" />
		<beans:property name="url" value="${jdbc.url}" />
		<beans:property name="username" value="${jdbc.username}" />
		<beans:property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<beans:property name="maxActive" value="${dbcp.maxActive}" />
		<beans:property name="maxIdle" value="${dbcp.maxIdle}" />
		<beans:property name="defaultAutoCommit" value="true" />
		<!-- 连接Idle一个小时后超时 -->
		<beans:property name="timeBetweenEvictionRunsMillis" value="3600000" />
		<beans:property name="minEvictableIdleTimeMillis" value="3600000" />
	</beans:bean>
	
	<!-- 启用注解; TokenEndpoint与AuthorizationEndpoint需要 -->
    <mvc:annotation-driven/>
    <mvc:default-servlet-handler/>

	<!-- /oauth/token 的http 配置, 用于监听该URL的请求 -->
    <http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="oauth2AuthenticationManager"
          entry-point-ref="oauth2AuthenticationEntryPoint">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
        <anonymous enabled="false"/>
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>

        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <!--unity http configuration-->
    <http pattern="/unity/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager">
        <anonymous enabled="false"/>

        <intercept-url pattern="/unity/**" access="ROLE_UNITY,SCOPE_READ"/>

        <custom-filter ref="unityResourceServer" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <!--mobile http configuration-->
    <http pattern="/mobile/**" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager">
        <anonymous enabled="false"/>

        <intercept-url pattern="/mobile/**" access="ROLE_MOBILE,SCOPE_READ"/>

        <custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

	<!-- ClientCredentialsTokenEndpointFilter配置, 该Filter将作用于Spring Security的chain 链条中 -->
    <beans:bean id="clientCredentialsTokenEndpointFilter"
                class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </beans:bean>

	<!-- resource-server配置, 这儿定义两种resource 利用统一规范的和手机终端的 注意: 每个resource-id的值必须在对应的ClientDetails中resourceIds值中存在 -->
    <!--unity resource server filter-->
    <oauth2:resource-server id="unityResourceServer" resource-id="unity-resource" token-services-ref="tokenServices"/>

    <!--mobile resource server filter-->
    <oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices"/>

    <beans:bean id="clientDetailsService" class="com.xa3ti.hhrz.base.security.CustomJdbcClientDetailsService">
        <beans:constructor-arg index="0" ref="dataSource1"/>
    </beans:bean>


    <!--Config token services  使用JdbcTokenStore, 将token信息存放数据库, 需要提供一个dataSource对象; 也可使用InMemoryTokenStore存于内存中-->
    <!--<beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>-->
    <beans:bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg index="0" ref="dataSource1"/>
    </beans:bean>

	<!-- 注入TokenStore,如果允许刷新token 请将supportRefreshToken 的值设置为true, 默认为不允许 -->
    <beans:bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="supportRefreshToken" value="true"/>
    	<beans:property name="clientDetailsService" ref="clientDetailsService" />
    	<beans:property name="accessTokenValiditySeconds" value="${security.token.validitySeconds:86400}" />
    </beans:bean>

	<!-- UserApprovalHandler配置, 这儿使用DefaultUserApprovalHandler, 这里是实现client是否可信任的关键点,可以扩展该接口来自定义approval行为 -->
    <beans:bean id="oauthUserApprovalHandler" class="com.xa3ti.hhrz.base.handler.OauthUserApprovalHandler">
        <beans:property name="oauthService" ref="oauthService"/>
    </beans:bean>

	<!-- OAuth2AccessDeniedHandler配置, 实现AccessDeniedHandler接口 -->
    <beans:bean id="oauth2AccessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>

    <oauth2:authorization-server client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
                                 user-approval-handler-ref="oauthUserApprovalHandler"
                                 user-approval-page="oauth_approval"
                                 error-page="oauth_error">
        <oauth2:authorization-code/>
        <oauth2:implicit/>
        <oauth2:refresh-token/>
        <oauth2:client-credentials/>
        <oauth2:password/>
    </oauth2:authorization-server>

	<!-- OAuth2AuthenticationEntryPoint配置 -->
    <beans:bean id="oauth2AuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>

	<!-- ClientDetailsUserDetailsService配置, 该类实现了Spring security中 UserDetailsService 接口 -->
    <beans:bean id="oauth2ClientDetailsUserService"
                class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

	<!-- oauth2 AuthenticationManager配置 -->
    <authentication-manager id="oauth2AuthenticationManager">
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService"/>
    </authentication-manager>

	<!-- Oauth2 AccessDecisionManager配置, 这儿在默认的Spring Security AccessDecisionManager的基础上添加了ScopeVoter -->
    <beans:bean id="oauth2AccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
	<!-- 登录入口 -->
	<beans:bean id="loginUrlAuthenticationEntryPoint"
                class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <beans:property name="loginFormUrl" value="/login.html"/>
    </beans:bean>
    <!-- UsernamePasswordAuthenticationFilter,需要传递登录参数时在这里处理 -->
    <beans:bean id="myUsernamePasswordAuthenticationFilter"
                class="com.xa3ti.hhrz.base.filter.MyUsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="authenticationFailureHandler" ref="failureHandler"/>
        <beans:property name="authenticationSuccessHandler" ref="successHandler"/>
    </beans:bean>
    <!-- 登录成功处理 -->
    <beans:bean id="successHandler"
                class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/index.html"/>
    </beans:bean>
    <!-- 登录失败处理 -->
    <beans:bean id="failureHandler"
                class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <beans:property name="defaultFailureUrl" value="/login.html?login_error=true"/>
    </beans:bean>
	<!-- 鉴权核心 -->
    <http access-denied-page="/login.html?authorization_error=2" disable-url-rewriting="true"
          authentication-manager-ref="authenticationManager" entry-point-ref="loginUrlAuthenticationEntryPoint">
        <intercept-url pattern="/oauth/**" access="ROLE_USER,ROLE_UNITY,ROLE_MOBILE"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		<custom-filter position="FORM_LOGIN_FILTER" ref="myUsernamePasswordAuthenticationFilter"/>
        <!-- <form-login authentication-failure-url="/login.html?authentication_error=1" 
        		default-target-url="/index.html"
                login-page="/login.html" 
                login-processing-url="/j_spring_security_check"
                authentication-success-handler-ref="authenticationDispatcher"/> -->
        <logout logout-success-url="/index.html" logout-url="/j_spring_security_logout"/>
        <anonymous/>
        <!-- 自定义拦截器 -->
		<custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
    </http>
    <!-- <http pattern="/login.html*" create-session="never" entry-point-ref="oauth2AuthenticationEntryPoint"
          access-decision-manager-ref="oauth2AccessDecisionManager">
		 <intercept-url pattern="/login.html*" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
		  <form-login login-page="/login.html" default-target-url="/index.html" authentication-failure-url="/login.html?error=true" />
		  <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR" />
	</http> -->
	<!-- 自定义拦截器配置 -->
	<beans:bean id="mySecurityFilter" class="com.xa3ti.hhrz.base.security.XaFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
	</beans:bean>

	<!-- MD5处理 -->
    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailsManager">
            <!-- <password-encoder hash="md5"/> -->
        </authentication-provider>
    </authentication-manager>


    <!--
    Oauth server end.............
    -->


</beans:beans>